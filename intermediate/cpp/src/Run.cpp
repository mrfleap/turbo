// Generated by Haxe 3.4.2
#include <hxcpp.h>

#ifndef INCLUDED_Run
#include <Run.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ce9c90125afbe782_2_main,"Run","main",0x137e6c5c,"Run.main","Run.hx",2,0x6ffe3073)

void Run_obj::__construct() { }

Dynamic Run_obj::__CreateEmpty() { return new Run_obj; }

void *Run_obj::_hx_vtable = 0;

Dynamic Run_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Run_obj > _hx_result = new Run_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Run_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x003e9f2b;
}

void Run_obj::main(){
            	HX_STACKFRAME(&_hx_pos_ce9c90125afbe782_2_main)
HXLINE(   3)		::haxe::Log_obj::trace(HX_("starting",c0,01,ac,42),hx::SourceInfo(HX_("Run.hx",73,30,fe,6f),3,HX_("Run",2b,9f,3e,00),HX_("main",39,38,56,48)));
HXLINE(   4)		 ::Dynamic lst__0__turbo_var__ = ::cpp::VirtualArray_obj::__new(0);
HXLINE(   5)		{
HXLINE(   5)			int _g = (int)0;
HXDLIN(   5)			while((_g < (int)1000000)){
HXLINE(   5)				_g = (_g + (int)1);
HXDLIN(   5)				int i = (_g - (int)1);
HXLINE(   6)				 ::Dynamic abc__1__turbo_var__ = (int)123;
HXLINE(   7)				::haxe::Log_obj::trace(abc__1__turbo_var__,hx::SourceInfo(HX_("Run.hx",73,30,fe,6f),7,HX_("Run",2b,9f,3e,00),HX_("main",39,38,56,48)));
HXLINE(   8)				 ::Dynamic out__2__turbo_var__;
HXLINE(   9)				bool _hx_tmp;
HXDLIN(   9)				if ((hx::Mod(i,(int)5) == (int)0)) {
HXLINE(   9)					_hx_tmp = (hx::Mod(i,(int)3) == (int)0);
            				}
            				else {
HXLINE(   9)					_hx_tmp = false;
            				}
HXDLIN(   9)				if (_hx_tmp) {
HXLINE(  10)					out__2__turbo_var__ = HX_("fizzbuzz",96,13,f4,1f);
            				}
            				else {
HXLINE(  12)					if ((hx::Mod(i,(int)5) == (int)0)) {
HXLINE(  13)						out__2__turbo_var__ = HX_("fizz",c3,da,bb,43);
            					}
            					else {
HXLINE(  15)						if ((hx::Mod(i,(int)3) == (int)0)) {
HXLINE(  16)							out__2__turbo_var__ = HX_("buzz",53,1b,20,41);
            						}
            						else {
HXLINE(  19)							out__2__turbo_var__ = i;
            						}
            					}
            				}
HXLINE(  21)				lst__0__turbo_var__->__Field(HX_("push",da,11,61,4a),hx::paccDynamic)(out__2__turbo_var__);
HXLINE(  22)				::haxe::Log_obj::trace(out__2__turbo_var__,hx::SourceInfo(HX_("Run.hx",73,30,fe,6f),22,HX_("Run",2b,9f,3e,00),HX_("main",39,38,56,48)));
            			}
            		}
HXLINE(  24)		 ::Dynamic abc__3__turbo_var__ = (int)345;
HXLINE(  25)		::haxe::Log_obj::trace(abc__3__turbo_var__,hx::SourceInfo(HX_("Run.hx",73,30,fe,6f),25,HX_("Run",2b,9f,3e,00),HX_("main",39,38,56,48)));
HXLINE(  26)		::haxe::Log_obj::trace(HX_("ended",fa,48,7a,70),hx::SourceInfo(HX_("Run.hx",73,30,fe,6f),26,HX_("Run",2b,9f,3e,00),HX_("main",39,38,56,48)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Run_obj,main,(void))


Run_obj::Run_obj()
{
}

bool Run_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Run_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Run_obj_sStaticStorageInfo = 0;
#endif

static void Run_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Run_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Run_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Run_obj::__mClass,"__mClass");
};

#endif

hx::Class Run_obj::__mClass;

static ::String Run_obj_sStaticFields[] = {
	HX_HCSTRING("main","\x39","\x38","\x56","\x48"),
	::String(null())
};

void Run_obj::__register()
{
	hx::Object *dummy = new Run_obj;
	Run_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Run","\x2b","\x9f","\x3e","\x00");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Run_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Run_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Run_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Run_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Run_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Run_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Run_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

